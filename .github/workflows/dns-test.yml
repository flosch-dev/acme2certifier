name: DNS-01 challenge tests

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  dns_challenge_tests:
    name: "dns_challenge_tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        keylength: [2048]
        acme-sh-version: [2.8.8, latest]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] setup openssl ca_handler"
      run: |
        sudo cp examples/ca_handler/openssl_ca_handler.py examples/Docker/data/ca_handler.py
        sudo mkdir -p examples/Docker/data/acme_ca/certs
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem examples/Docker/data/acme_ca/
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler_dns.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "Test http://acme-srv/directory is accessable again"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:${{ matrix.acme-sh-version }} daemon
        sudo cp .github/dns_test.sh acme-sh/
        docker exec -i acme-sh apk add dnsmasq
        docker exec -i acme-sh mv /acme.sh/dns_test.sh /root/.acme.sh/dnsapi/
        docker exec -i acme-sh chmod +x /root/.acme.sh/dnsapi/dns_test.sh

    - name: "[ PREPARE ] set DNS server"
      run: |
        cd examples/Docker/
        docker-compose stop
        docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' acme-sh
        sudo sed -i "s/DNS-IP/$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' acme-sh)/g" data/acme_srv.cfg
        docker-compose start
        docker-compose logs

    - name: "[ ENROLL ] acme.sh - single domain"
      run: |
        docker exec -i acme-sh acme.sh --dnssleep 10 --server http://acme-srv --accountemail 'acme-sh@example.com' --issue --dns dns_test -d acme-sh.single --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ ENROLL ] acme.sh - multi domain"
      run: |
        docker exec -i acme-sh acme.sh --dnssleep 10 --server http://acme-srv --accountemail 'acme-sh@example.com' --issue --dns dns_test -d acme-sh.multi1 -d acme-sh.multi2 --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ ENROLL ] acme.sh - double domain"
      run: |
        docker exec -i acme-sh acme.sh --dnssleep 10 --server http://acme-srv --accountemail 'acme-sh@example.com' --issue --dns dns_test -d acme-sh.double -d acme-sh.double --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ ENROLL ] acme.sh - single wildcard domain"
      run: |
        docker exec -i acme-sh acme.sh --dnssleep 10 --server http://acme-srv --accountemail 'acme-sh@example.com' --issue --dns dns_test -d *.acme-sh.wildcard --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ ENROLL ] acme.sh - double wildcard domain"
      run: |
        docker exec -i acme-sh acme.sh --dnssleep 10 --server http://acme-srv --accountemail 'acme-sh@example.com' --issue --dns dns_test -d acme-sh.wildcard -d *.acme-sh.wildcard --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ Test ] check TXT record exists"
      if: ${{ failure() }}
      run: |
        docker exec -i acme-sh ps -a
        docker exec -i acme-sh netstat -anu
        cd examples/Docker/
        docker-compose logs
        dig -t TXT _acme-challenge.acme-sh.single @$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' acme-sh)
        dig -t TXT _acme-challenge.acme-sh.double @$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' acme-sh)
        dig -t TXT _acme-challenge.acme-sh.multi1 @$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' acme-sh)
        dig -t TXT _acme-challenge.acme-sh.multi2 @$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' acme-sh)
        dig -t TXT _acme-challenge.acme-sh.wildcard @$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' acme-sh)

    #- name: "[ ENROLL ] lego"
    #  run: |
    #    mkdir lego
    #    docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_02 --hmac bWFjXzAy -d lego.acme --tls run
    #    sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem lego/certificates/lego.acme.crt

    #- name: "[ * ] collecting test logs"
    #  if: ${{ failure() }}
    #  run: |
    #    mkdir -p ${{ github.workspace }}/artifact/upload
    #    sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
    #    cd examples/Docker
    #    docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
    #    sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data

    #- name: "[ * ] uploading artificates"
    #  uses: actions/upload-artifact@v2
    #  if: ${{ failure() }}
    #  with:
    #    name: eab-${{ matrix.keylength }}.tar.gz
    #    path: ${{ github.workspace }}/artifact/upload/
